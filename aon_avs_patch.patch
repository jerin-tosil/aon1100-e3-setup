diff --git a/KWD/AON1100E3/CMakeLists.txt b/KWD/AON1100E3/CMakeLists.txt
new file mode 100644
index 0000000..66658d5
--- /dev/null
+++ b/KWD/AON1100E3/CMakeLists.txt
@@ -0,0 +1,6 @@
+cmake_minimum_required(VERSION 3.1 FATAL_ERROR)
+project(AON1100E3 LANGUAGES CXX)
+
+include(../../build/BuildDefaults.cmake)
+
+add_subdirectory("src")
\ No newline at end of file
diff --git a/KWD/AON1100E3/include/AON1100E3/AON1100KeyWordDetect.h b/KWD/AON1100E3/include/AON1100E3/AON1100KeyWordDetect.h
new file mode 100644
index 0000000..d9f6166
--- /dev/null
+++ b/KWD/AON1100E3/include/AON1100E3/AON1100KeyWordDetect.h
@@ -0,0 +1,114 @@
+#ifndef AON1100_KEY_WORD_DETECT_H
+#define AON1100_KEY_WORD_DETECT_H
+
+
+#include <atomic>
+#include <string>
+#include <thread>
+#include <unordered_map>
+#include <unordered_set>
+
+#include <AVSCommon/Utils/AudioFormat.h>
+#include <AVSCommon/AVS/AudioInputStream.h>
+#include <AVSCommon/SDKInterfaces/KeyWordObserverInterface.h>
+#include <AVSCommon/SDKInterfaces/KeyWordDetectorStateObserverInterface.h>
+
+#include "KWD/AbstractKeywordDetector.h"
+
+namespace alexaClientSDK {
+namespace kwd {
+
+
+class AON1100KeyWordDetector : public AbstractKeywordDetector {
+public:
+	/**
+     * Creates a @c AON1100KeyWordDetector.
+     *
+     * @param stream The stream of audio data. This should be formatted in LPCM encoded with 16 bits per sample and
+     * have a sample rate of 16 kHz. Additionally, the data should be in little endian format.
+     * @param audioFormat The format of the audio data located within the stream.
+     * @param keyWordObservers The observers to notify of keyword detections.
+     * @param keyWordDetectorStateObservers The observers to notify of state changes in the engine.
+     * @param msToPushPerIteration The amount of data in milliseconds to push to Kitt.ai at a time. Smaller sizes will
+     * lead to less delay but more CPU usage. Additionally, larger amounts of data fed into the engine per iteration
+     * might lead longer delays before receiving keyword detection events. This has been defaulted to 20 milliseconds
+     * as it is a good trade off between CPU usage and recognition delay.
+     * @return A new @c AON1100KeyWordDetector, or @c nullptr if the operation failed.
+     */
+	 static std::unique_ptr<AON1100KeyWordDetector> create(
+        std::shared_ptr<avsCommon::avs::AudioInputStream> stream,
+        avsCommon::utils::AudioFormat audioFormat,
+        std::unordered_set<std::shared_ptr<avsCommon::sdkInterfaces::KeyWordObserverInterface>> keyWordObservers,
+        std::unordered_set<std::shared_ptr<avsCommon::sdkInterfaces::KeyWordDetectorStateObserverInterface>>
+            keyWordDetectorStateObservers,
+        std::chrono::milliseconds msToPushPerIteration = std::chrono::milliseconds(20));
+    
+	/**
+     * Destructor.
+     */
+    ~AON1100KeyWordDetector();
+
+private:
+	/**
+     * Constructor.
+     *
+     * @param stream The stream of audio data. This should be formatted in LPCM encoded with 16 bits per sample and
+     * have a sample rate of 16 kHz. Additionally, the data should be in little endian format.
+     * @param audioFormat The format of the audio data located within the stream.
+     * @param keyWordObservers The observers to notify of keyword detections.
+     * @param keyWordDetectorStateObservers The observers to notify of state changes in the engine.
+     * @param msToPushPerIteration The amount of data in milliseconds to push to Kitt.ai at a time. Smaller sizes will
+     * lead to less delay but more CPU usage. Additionally, larger amounts of data fed into the engine per iteration
+     * might lead longer delays before receiving keyword detection events. This has been defaulted to 20 milliseconds
+     * as it is a good trade off between CPU usage and recognition delay.
+     */
+	AON1100KeyWordDetector(
+        std::shared_ptr<avsCommon::avs::AudioInputStream> stream,
+        avsCommon::utils::AudioFormat audioFormat,
+        std::unordered_set<std::shared_ptr<avsCommon::sdkInterfaces::KeyWordObserverInterface>> keyWordObservers,
+        std::unordered_set<std::shared_ptr<avsCommon::sdkInterfaces::KeyWordDetectorStateObserverInterface>>
+            keyWordDetectorStateObservers,
+        std::chrono::milliseconds msToPushPerIteration = std::chrono::milliseconds(20));
+
+    /**
+     * Initializes the stream reader and kicks off a thread to read data from the stream. This function should only be
+     * called once with each new @c AON1100KeyWordDetector.
+     *
+     * @return @c true if the engine was initialized properly and @c false otherwise.
+     */
+    bool init();
+	
+	/// The main function that reads data and feeds it into the engine.
+    void detectionLoop();
+
+
+	/// Internal thread that monitors keyword detection.
+    std::thread m_detectionThread;
+	
+	/// The stream of audio data.
+    const std::shared_ptr<avsCommon::avs::AudioInputStream> m_stream;
+    /**
+     * The max number of samples to push into the underlying engine per iteration. This will be determined based on the
+     * sampling rate of the audio data passed in.
+     */
+    const size_t m_maxSamplesPerPush;
+
+	/// Indicates whether the internal main loop should keep running.
+    std::atomic<bool> m_isRunning;
+    
+	/// IPC Message queue identifier
+	int m_ipcMsgQId;
+	
+    /// The reader that will be used to read audio data from the stream.
+    std::shared_ptr<avsCommon::avs::AudioInputStream::Reader> m_streamReader;
+
+
+
+    
+};
+
+
+}  // namespace kwd
+}  // namespace alexaClientSDK
+
+#endif // AON1100_KEY_WORD_DETECT_H
\ No newline at end of file
diff --git a/KWD/AON1100E3/src/AON1100KeyWordDetect.cpp b/KWD/AON1100E3/src/AON1100KeyWordDetect.cpp
new file mode 100644
index 0000000..19e112f
--- /dev/null
+++ b/KWD/AON1100E3/src/AON1100KeyWordDetect.cpp
@@ -0,0 +1,147 @@
+#include <AVSCommon/Utils/Memory/Memory.h>
+#include <AVSCommon/Utils/Logger/Logger.h>
+
+#include "AON1100E3/AON1100KeyWordDetect.h"
+
+#include <exception>
+#include <unistd.h>
+#include <iostream>
+#include <stdlib.h>
+#include <memory>
+
+#include <sys/types.h>
+#include <sys/ipc.h>
+#include <sys/msg.h>
+
+namespace alexaClientSDK {
+namespace kwd {
+
+using namespace avsCommon;
+using namespace avsCommon::avs;
+using namespace avsCommon::sdkInterfaces;
+using namespace avsCommon::utils;
+
+/// String to identify log entries originating from this file.
+static const std::string TAG("AON1100KeyWordDetector");
+/**
+ * Create a LogEntry using this file's TAG and the specified event string.
+ *
+ * @param The event string for this @c LogEntry.
+ */
+#define LX(event) alexaClientSDK::avsCommon::utils::logger::LogEntry(TAG, event)
+
+/// The number of hertz per kilohertz.
+static const size_t HERTZ_PER_KILOHERTZ = 1000;
+
+/// The timeout to use for read calls to the SharedDataStream.
+const std::chrono::milliseconds TIMEOUT_FOR_READ_CALLS = std::chrono::milliseconds(1000);
+
+const int msgkey = 1234;
+
+std::unique_ptr<AON1100KeyWordDetector> AON1100KeyWordDetector::create(
+        std::shared_ptr<AudioInputStream> stream,
+        AudioFormat audioFormat,
+        std::unordered_set<std::shared_ptr<KeyWordObserverInterface>> keyWordObservers,
+        std::unordered_set<std::shared_ptr<KeyWordDetectorStateObserverInterface>> keyWordDetectorStateObservers,
+        std::chrono::milliseconds msToPushPerIteration)  {
+			
+			ACSDK_INFO(LX(__func__));
+    
+    if (!stream) {
+        ACSDK_ERROR(LX("createFailed").d("reason", "nullStream"));
+        return nullptr;
+    }
+
+    // TODO: ACSDK-249 - Investigate cpu usage of converting bytes between endianness and if it's not too much, do it.
+    if (isByteswappingRequired(audioFormat)) {
+        ACSDK_ERROR(LX("createFailed").d("reason", "endianMismatch"));
+        return nullptr;
+    }
+
+    std::unique_ptr<AON1100KeyWordDetector> detector(new AON1100KeyWordDetector(
+        stream,
+        audioFormat,
+        keyWordObservers,
+        keyWordDetectorStateObservers,
+        msToPushPerIteration));
+
+    if (!detector->init()) {
+        ACSDK_ERROR(LX("createFailed").d("reason", "initDetectorFailed"));
+        return nullptr;
+    }
+    
+    return detector;
+}
+
+
+
+AON1100KeyWordDetector::AON1100KeyWordDetector(
+    std::shared_ptr<AudioInputStream> stream,
+    avsCommon::utils::AudioFormat audioFormat,
+    std::unordered_set<std::shared_ptr<KeyWordObserverInterface>> keyWordObservers,
+    std::unordered_set<std::shared_ptr<KeyWordDetectorStateObserverInterface>> keyWordDetectorStateObservers,
+    std::chrono::milliseconds msToPushPerIteration) :
+
+        AbstractKeywordDetector(keyWordObservers, keyWordDetectorStateObservers),
+        m_stream{stream},
+        m_maxSamplesPerPush((audioFormat.sampleRateHz / HERTZ_PER_KILOHERTZ) * msToPushPerIteration.count()),
+        m_isRunning { false } { m_ipcMsgQId = -1; }
+
+AON1100KeyWordDetector::~AON1100KeyWordDetector() {
+    m_isRunning = false;
+    if (m_detectionThread.joinable())
+        m_detectionThread.join();
+}
+
+bool AON1100KeyWordDetector::init() {
+	ACSDK_INFO(LX(__func__));
+	
+	m_ipcMsgQId = msgget(msgkey, IPC_CREAT | 0666);
+	if (m_ipcMsgQId == -1) {
+	    ACSDK_ERROR(LX("initFailed").d("reason", "MessageQueueInitFailed"));
+        return false;
+   }
+
+    m_streamReader = m_stream->createReader(AudioInputStream::Reader::Policy::BLOCKING);
+    if (!m_streamReader) {
+        ACSDK_ERROR(LX("initFailed").d("reason", "createStreamReaderFailed"));
+        return false;
+    }
+
+    m_isRunning = true;
+    m_detectionThread = std::thread(&AON1100KeyWordDetector::detectionLoop, this);
+
+    return true;
+}
+
+
+void AON1100KeyWordDetector::detectionLoop() {
+	ACSDK_INFO(LX(__func__));
+	struct msgbuf msg;
+    notifyKeyWordDetectorStateObservers(KeyWordDetectorStateObserverInterface::KeyWordDetectorState::ACTIVE);
+	int16_t audioDataToPush[m_maxSamplesPerPush];
+    
+    while (m_isRunning) {
+        bool didErrorOccur = false;
+		readFromStream(m_streamReader, m_stream, audioDataToPush, 
+							m_maxSamplesPerPush, TIMEOUT_FOR_READ_CALLS, &didErrorOccur);
+        if (didErrorOccur) 
+            break;
+		
+		if (msgrcv(m_ipcMsgQId, &msg, 1, 1100, MSG_NOERROR | IPC_NOWAIT) == -1) {
+			if (errno != ENOMSG)
+			   perror("msgrcv");
+		} else {
+			notifyKeyWordObservers(
+				m_stream,
+				"alexa",
+				KeyWordObserverInterface::UNSPECIFIED_INDEX,
+				m_streamReader->tell());
+		}
+		usleep(1000000);
+    }
+	m_streamReader->close();
+}
+
+}  // namespace kwd
+}  // namespace alexaClientSDK
\ No newline at end of file
diff --git a/KWD/AON1100E3/src/CMakeLists.txt b/KWD/AON1100E3/src/CMakeLists.txt
new file mode 100644
index 0000000..cc265cd
--- /dev/null
+++ b/KWD/AON1100E3/src/CMakeLists.txt
@@ -0,0 +1,10 @@
+add_definitions("-DACSDK_LOG_MODULE=AON1100KeyWordDetector")
+add_library(AON1100E3 SHARED 
+	AON1100KeyWordDetect.cpp) 
+set_target_properties( AON1100E3 PROPERTIES COMPILE_FLAGS "-std=c++11" )
+
+target_include_directories(AON1100E3 PUBLIC
+	"${KWD_SOURCE_DIR}/include" 
+	"${AON1100E3_SOURCE_DIR}/include")
+	
+target_link_libraries( AON1100E3 KWD AVSCommon )
\ No newline at end of file
diff --git a/KWD/CMakeLists.txt b/KWD/CMakeLists.txt
index ae12256..4978b8d 100644
--- a/KWD/CMakeLists.txt
+++ b/KWD/CMakeLists.txt
@@ -16,6 +16,9 @@ endif()
 if(SENSORY_KEY_WORD_DETECTOR)
     add_subdirectory("Sensory")
 endif()
+if(AON1100_KEY_WORD_DETECTOR)
+    add_subdirectory("AON1100E3")
+endif()
 
 if(KWD)
     add_subdirectory("KWDProvider")
diff --git a/KWD/KWDProvider/src/CMakeLists.txt b/KWD/KWDProvider/src/CMakeLists.txt
index 207abe7..39a62ce 100644
--- a/KWD/KWDProvider/src/CMakeLists.txt
+++ b/KWD/KWDProvider/src/CMakeLists.txt
@@ -14,5 +14,9 @@ if(KITTAI_KEY_WORD_DETECTOR)
     target_link_libraries(KeywordDetectorProvider KITTAI)
 endif()
 
+if(AON1100_KEY_WORD_DETECTOR)
+    target_link_libraries(KeywordDetectorProvider AON1100E3)
+endif()
+
 # install target
 asdk_install()
\ No newline at end of file
diff --git a/KWD/KWDProvider/src/KeywordDetectorProvider.cpp b/KWD/KWDProvider/src/KeywordDetectorProvider.cpp
index 9ad43a1..5d74171 100644
--- a/KWD/KWDProvider/src/KeywordDetectorProvider.cpp
+++ b/KWD/KWDProvider/src/KeywordDetectorProvider.cpp
@@ -19,6 +19,8 @@
 #include <KittAi/KittAiKeyWordDetector.h>
 #elif KWD_SENSORY
 #include <Sensory/SensoryKeywordDetector.h>
+#elif KWD_AON1100E3
+#include <AON1100E3/AON1100KeyWordDetect.h>
 #endif
 
 #ifdef KWD_KITTAI
@@ -60,6 +62,13 @@ std::unique_ptr<kwd::AbstractKeywordDetector> KeywordDetectorProvider::create(
         keyWordObservers,
         keyWordDetectorStateObservers,
         pathToInputFolder + "/spot-alexa-rpi-31000.snsr");
+#elif defined(KWD_AON1100E3)
+	return kwd::AON1100KeyWordDetector::create(
+        stream,
+        audioFormat,
+        keyWordObservers,
+        keyWordDetectorStateObservers,
+        std::chrono::milliseconds(10));
 #else
     return nullptr;
 #endif
diff --git a/SampleApp/src/SampleApplication.cpp b/SampleApp/src/SampleApplication.cpp
index ad9756c..2bcef70 100644
--- a/SampleApp/src/SampleApplication.cpp
+++ b/SampleApp/src/SampleApplication.cpp
@@ -48,6 +48,10 @@
 #include <KWDProvider/KeywordDetectorProvider.h>
 #endif
 
+#ifdef KWD_AON1100E3
+#include <AON1100E3/AON1100KeyWordDetect.h>
+#endif
+
 #ifdef PORTAUDIO
 #include <SampleApp/PortAudioMicrophoneWrapper.h>
 #endif
@@ -1513,6 +1517,18 @@ bool SampleApplication::initialize(
         ACSDK_CRITICAL(LX("Failed to create keyword detector!"));
     }
 
+#ifdef KWD_AON1100E3
+    m_keywordDetector = kwd::AON1100KeyWordDetector::create(
+        sharedDataStream,
+        compatibleAudioFormat,
+        {keywordObserver},
+        std::unordered_set<
+            std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::KeyWordDetectorStateObserverInterface>>());
+    if (!m_keywordDetector) {
+        alexaClientSDK::sampleApp::ConsolePrinter::simplePrint("Failed to create AON1100KeyWordDetector!");
+        return false;
+    }
+#endif
     // If wake word is enabled, then creating the interaction manager with a wake word audio provider.
     m_interactionManager = std::make_shared<alexaClientSDK::sampleApp::InteractionManager>(
         client,
diff --git a/build/cmake/KeywordDetector.cmake b/build/cmake/KeywordDetector.cmake
index 7526d84..57c41d5 100644
--- a/build/cmake/KeywordDetector.cmake
+++ b/build/cmake/KeywordDetector.cmake
@@ -50,7 +50,9 @@ set(SENSORY_KEY_WORD_DETECTOR_INCLUDE_DIR "" CACHE PATH "Sensory keyword detecto
 mark_as_dependent(SENSORY_KEY_WORD_DETECTOR_LIB_PATH SENSORY_KEY_WORD_DETECTOR)
 mark_as_dependent(SENSORY_KEY_WORD_DETECTOR_INCLUDE_DIR SENSORY_KEY_WORD_DETECTOR)
 
-if(NOT AMAZON_KEY_WORD_DETECTOR AND NOT AMAZONLITE_KEY_WORD_DETECTOR AND NOT KITTAI_KEY_WORD_DETECTOR AND NOT SENSORY_KEY_WORD_DETECTOR)
+option(AON1100_KEY_WORD_DETECTOR "Enable AON1100 keyword detector." OFF)
+
+if(NOT AMAZON_KEY_WORD_DETECTOR AND NOT AMAZONLITE_KEY_WORD_DETECTOR AND NOT KITTAI_KEY_WORD_DETECTOR AND NOT SENSORY_KEY_WORD_DETECTOR AND NOT AON1100_KEY_WORD_DETECTOR)
     message("No keyword detector type specified, skipping build of keyword detector.")
     return()
 endif()
@@ -116,3 +118,10 @@ if(SENSORY_KEY_WORD_DETECTOR)
     add_definitions(-DKWD_SENSORY)
     set(KWD ON)
 endif()
+
+if(AON1100_KEY_WORD_DETECTOR)
+    message("Creating ${PROJECT_NAME} with keyword detector type: AON1100")
+    add_definitions(-DKWD)
+    add_definitions(-DKWD_AON1100E3)
+    set(KWD ON)
+endif()
\ No newline at end of file
